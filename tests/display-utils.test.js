import { emptyScreen, charTable } from '..//src/display-char-table';
import { DisplayMessageScroller, logDisplay } from '../src/display-utils';

test('Empty screen retuns 8x8 matrix', () => {
  expect(emptyScreen().length).toBe(64);
});

test('shift column should shift away 1st col and add a new col at right', () => {
  const sut = new DisplayMessageScroller('test', '#ffffff', '#000000');
  const x = true,
    _ = false;
  const matrix = [
    x, _, _, _, _, _, _, _,
    _, _, _, _, _, _, _, _,
    _, _, _, _, _, _, _, _,
    _, _, _, _, _, _, _, _,
    _, _, _, _, _, _, _, _,
    _, _, _, _, _, _, _, _,
    _, _, _, _, _, _, _, _,
    _, _, _, _, _, _, _, _,
  ];

  const { result, nextPixels } = sut.shiftColumn(matrix, charTable['i']);

  const expected = [
    _, _, _, _, _, _, _, _,
    _, _, _, _, _, _, _, _,
    _, _, _, _, _, _, _, _,
    _, _, _, _, _, _, _, x,
    _, _, _, _, _, _, _, _,
    _, _, _, _, _, _, _, _,
    _, _, _, _, _, _, _, _,
    _, _, _, _, _, _, _, x,
  ];

  const expectedNext = [
    _, _,
    x, _,
    _, _,
    x, _,
    x, _,
    x, _,
    x, _,
    x, x,
  ];

  expect(result).toEqual(expected);

  expect(nextPixels).toEqual(expectedNext);
});

test('DisplayMessageScroller::iterator should iterate message generating screen frames', () => {
  const x = [200, 200, 200],
    _ = [0, 0, 0];
  const displayScroller = new DisplayMessageScroller('i !', x, _);

  const expectationsByFrame = [
    [
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, x,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, x,
    ],
    [
      _, _, _, _, _, _, _,_,
      _, _, _, _, _, _, _,x,
      _, _, _, _, _, _, _,_,
      _, _, _, _, _, _, x,x,
      _, _, _, _, _, _, _,x,
      _, _, _, _, _, _, _,x,
      _, _, _, _, _, _, _,x,
      _, _, _, _, _, _, x,x,
    ],
    [
      _, _, _, _, _, _,_, _,
      _, _, _, _, _, _,x, _,
      _, _, _, _, _, _,_, _,
      _, _, _, _, _, x,x, _,
      _, _, _, _, _, _,x, _,
      _, _, _, _, _, _,x, _,
      _, _, _, _, _, _,x, _,
      _, _, _, _, _, x,x, x,
    ],
    [
      _, _, _, _, _,_, _, _,
      _, _, _, _, _,x, _, _,
      _, _, _, _, _,_, _, _,
      _, _, _, _, x,x, _, _,
      _, _, _, _, _,x, _, _,
      _, _, _, _, _,x, _, _,
      _, _, _, _, _,x, _, _,
      _, _, _, _, x,x, x, _,
    ],
    [
      _, _, _, _,_, _, _, _,
      _, _, _, _,x, _, _, _,
      _, _, _, _,_, _, _, _,
      _, _, _, x,x, _, _, _,
      _, _, _, _,x, _, _, _,
      _, _, _, _,x, _, _, _,
      _, _, _, _,x, _, _, _,
      _, _, _, x,x, x, _, _,
    ],
    [
      _, _, _,_, _, _, _, x,
      _, _, _,x, _, _, _, x,
      _, _, _,_, _, _, _, x,
      _, _, x,x, _, _, _, x,
      _, _, _,x, _, _, _, x,
      _, _, _,x, _, _, _, x,
      _, _, _,x, _, _, _, _,
      _, _, x,x, x, _, _, x,
    ],
    [
      _, _,_, _, _, _, x, _,
      _, _,x, _, _, _, x, _,
      _, _,_, _, _, _, x, _,
      _, x,x, _, _, _, x, _,
      _, _,x, _, _, _, x, _,
      _, _,x, _, _, _, x, _,
      _, _,x, _, _, _, _, _,
      _, x,x, x, _, _, x, _,
    ],
    [
      _,_, _, _, _, x, _, _,
      _,x, _, _, _, x, _, _,
      _,_, _, _, _, x, _, _,
      x,x, _, _, _, x, _, _,
      _,x, _, _, _, x, _, _,
      _,x, _, _, _, x, _, _,
      _,x, _, _, _, _, _, _,
      x,x, x, _, _, x, _, _,
    ],
    [
      _, _, _, _, x, _, _, _,
      x, _, _, _, x, _, _, _,
      _, _, _, _, x, _, _, _,
      x, _, _, _, x, _, _, _,
      x, _, _, _, x, _, _, _,
      x, _, _, _, x, _, _, _,
      x, _, _, _, _, _, _, _,
      x, x, _, _, x, _, _, _,
    ],
    [
      _, _, _, x, _, _, _, _,
      _, _, _, x, _, _, _, _,
      _, _, _, x, _, _, _, _,
      _, _, _, x, _, _, _, _,
      _, _, _, x, _, _, _, _,
      _, _, _, x, _, _, _, _,
      _, _, _, _, _, _, _, _,
      x, _, _, x, _, _, _, _,
    ],
    [
      _, _, x, _, _, _, _, _,
      _, _, x, _, _, _, _, _,
      _, _, x, _, _, _, _, _,
      _, _, x, _, _, _, _, _,
      _, _, x, _, _, _, _, _,
      _, _, x, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, x, _, _, _, _, _,
    ],
    [
      _, x, _, _, _, _, _, _,
      _, x, _, _, _, _, _, _,
      _, x, _, _, _, _, _, _,
      _, x, _, _, _, _, _, _,
      _, x, _, _, _, _, _, _,
      _, x, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, x, _, _, _, _, _, _,
    ],
    [
      x, _, _, _, _, _, _, _,
      x, _, _, _, _, _, _, _,
      x, _, _, _, _, _, _, _,
      x, _, _, _, _, _, _, _,
      x, _, _, _, _, _, _, _,
      x, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      x, _, _, _, _, _, _, _,
    ],
    [
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
    ]
  ];

  for (let display of displayScroller) {
    const expectedFrame = expectationsByFrame.shift();
    expect(display).toEqual(expectedFrame);
  }

  expect(expectationsByFrame.length).toBe(0);
});

test('DisplayMessageScroller::iterator should render letter spacing of 1 col', () => {
  const x = [200, 200, 200],
    _ = [0, 0, 0];
  const displayScroller = new DisplayMessageScroller('i!', x, _);

  const expectationsByFrame = [
    [
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, x,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, x,
    ],
    [
      _, _, _, _, _, _, _,_,
      _, _, _, _, _, _, _,x,
      _, _, _, _, _, _, _,_,
      _, _, _, _, _, _, x,x,
      _, _, _, _, _, _, _,x,
      _, _, _, _, _, _, _,x,
      _, _, _, _, _, _, _,x,
      _, _, _, _, _, _, x,x,
    ],
    [
      _, _, _, _, _, _,_, _,
      _, _, _, _, _, _,x, _,
      _, _, _, _, _, _,_, _,
      _, _, _, _, _, x,x, _,
      _, _, _, _, _, _,x, _,
      _, _, _, _, _, _,x, _,
      _, _, _, _, _, _,x, _,
      _, _, _, _, _, x,x, x,
    ],
    [
      _, _, _, _, _,_, _, _,
      _, _, _, _, _,x, _, _,
      _, _, _, _, _,_, _, _,
      _, _, _, _, x,x, _, _,
      _, _, _, _, _,x, _, _,
      _, _, _, _, _,x, _, _,
      _, _, _, _, _,x, _, _,
      _, _, _, _, x,x, x, _,
    ],
    [
      _, _, _, _,_, _, _, x,
      _, _, _, _,x, _, _, x,
      _, _, _, _,_, _, _, x,
      _, _, _, x,x, _, _, x,
      _, _, _, _,x, _, _, x,
      _, _, _, _,x, _, _, x,
      _, _, _, _,x, _, _, _,
      _, _, _, x,x, x, _, x,
    ],
    [
      _, _, _,_, _, _, x, _,
      _, _, _,x, _, _, x, _,
      _, _, _,_, _, _, x, _,
      _, _, x,x, _, _, x, _,
      _, _, _,x, _, _, x, _,
      _, _, _,x, _, _, x, _,
      _, _, _,x, _, _, _, _,
      _, _, x,x, x, _, x, _,
    ],
    [
      _, _,_, _, _, x, _, _,
      _, _,x, _, _, x, _, _,
      _, _,_, _, _, x, _, _,
      _, x,x, _, _, x, _, _,
      _, _,x, _, _, x, _, _,
      _, _,x, _, _, x, _, _,
      _, _,x, _, _, _, _, _,
      _, x,x, x, _, x, _, _,
    ],
    [
      _, _, _, _, x, _, _, _,
      _, x, _, _, x, _, _, _,
      _, _, _, _, x, _, _, _,
      x, x, _, _, x, _, _, _,
      _, x, _, _, x, _, _, _,
      _, x, _, _, x, _, _, _,
      _, x, _, _, _, _, _, _,
      x, x, x, _, x, _, _, _,
    ],
    [
      _, _, _, x, _, _, _, _,
      x, _, _, x, _, _, _, _,
      _, _, _, x, _, _, _, _,
      x, _, _, x, _, _, _, _,
      x, _, _, x, _, _, _, _,
      x, _, _, x, _, _, _, _,
      x, _, _, _, _, _, _, _,
      x, x, _, x, _, _, _, _,
    ],
    [
      _, _, x, _, _, _, _, _,
      _, _, x, _, _, _, _, _,
      _, _, x, _, _, _, _, _,
      _, _, x, _, _, _, _, _,
      _, _, x, _, _, _, _, _,
      _, _, x, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      x, _, x, _, _, _, _, _,
    ],
    [
      _, x, _, _, _, _, _, _,
      _, x, _, _, _, _, _, _,
      _, x, _, _, _, _, _, _,
      _, x, _, _, _, _, _, _,
      _, x, _, _, _, _, _, _,
      _, x, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, x, _, _, _, _, _, _,
    ],
    [
      x, _, _, _, _, _, _, _,
      x, _, _, _, _, _, _, _,
      x, _, _, _, _, _, _, _,
      x, _, _, _, _, _, _, _,
      x, _, _, _, _, _, _, _,
      x, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      x, _, _, _, _, _, _, _,
    ],
    [
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
      _, _, _, _, _, _, _, _,
    ]
  ];

  for (let display of displayScroller) {
    const expectedFrame = expectationsByFrame.shift();
    expect(display).toEqual(expectedFrame);
  }

  expect(expectationsByFrame.length).toBe(0);
});